'''
Created on Feb, 2012

@author: cpf
@since: spring 2012

@license: Distributed under the terms of the GNU General Public License (GPL).
'''
from os import path
import os, csv, re, serial
import threading, socket
import time
import random

from datetime import datetime
from pyglet.gl import *
from pyglet import image
import numpy as np

#pylnco modules
from pyglet.clock import _default_time_function as time
from controller import getPathFromString
from display.tools import *
from abstract.AbstractClasses import DrawableModule
import controller.trigManager as tManager
from output.parallelPort import *




class ModuleMain(DrawableModule):
    """
    A module to precisely control timing of stimulus pair presentation
    """
    defaultInitConf = {
        'name': 'multiStim',
        'logToCSV': False,
        'address': '0xD050',
        'keys': 'LEFT RIGHT'
    }
    
    defaultRunConf = {
        'SOA': "[-0.200, -0.090, -0.055, -0.030, -0.020, 0.020, 0.030, 0.055, 0.090, 0.200]",
        'Tactil': "[48, 192]",
        'Visual': "[1010, 101]",
        'durTac': "0.035",
        'durVis': "0.035",
        'durWait': "3.0",
        'visUL': "$EXPYVRROOT$/lncocomponents/visuotactile/dot.png",
        'visUR': "$EXPYVRROOT$/lncocomponents/visuotactile/dot.png",
        'visDL': "$EXPYVRROOT$/lncocomponents/visuotactile/dot.png",
        'visDR': "$EXPYVRROOT$/lncocomponents/visuotactile/dot.png",
        'posVert': "[55.0, 55.0, 50.0, 50.0]",
        'posHorz': "[48.0, 52.0, 48.0, 52.0]",
        'scaleMax': "[1.0, 1.0, 1.0, 1.0]",
        'scaleMin': "[0.0, 0.0, 0.0, 0.0]"
    }
    
    confDescription = [
        ('name', 'str', "Python script"),
        ('logToCSV', 'bool', "Save data to coma-separated-values file ( <modulename>_<date>.csv )"),  
        ('address', 'str', "Address of port"),
        ('keys', 'str', "List of TWO keys to listen to (space-separated)"),
        ('SOA', 'code', "List of stimulus onset asynchronies in seconds: '-' Visual-Tactil, '+' Tactil-Visual (list)."),
        ('Tactil', 'code', "List of trigger codes for the four vibrators, UL=16 UR=64 DL=32 DR=128, ("),
        ('Visual', 'code', "List of visual stim configurations, UL=1000 UR=100 DL=10 DR=1"),
        ('durTac', 'code', ""),
        ('durVis', 'code', ""),
        ('durWait', 'code', ""),
        ('visUL', 'str', ""),
        ('visUR', 'str', ""),
        ('visDL', 'str', ""),
        ('visDR', 'str', ""),
        ('posVert', 'code', ""),
        ('posHorz', 'code', ""),
        ('scaleMax', 'code', ""),
        ('scaleMin', 'code', "")
    ]
    
    
    
    
    
    def __init__(self, controller, initConfig=None, runConfigs=None):
        
        DrawableModule.__init__(self, controller, initConfig, runConfigs)
        
        self.lastTrigTime = 0
        self.logtimes = {}
        self.buttontimes = {}
        self.startTimes = {}
        self.currentKey = []
        
        self.startTimes[0] = time()
        
        
        # connect to parallel port
        self.address = self.initConf['address']
        try:
            self.pp = ParallelPort(self.address)
        except:
            print '#### Warning: Could not connect to Parallel Port'
            self.pp = None
            pass
        
        # init logger
        self.logActive = self.initConf['logToCSV']
        if self.logActive:
            now = datetime.today()
            self.csvLogger = csv.writer(open(path.join(self.controller.gLogger.Path, \
                                        now.strftime('%y%m%d%H%M%S_') + self.initConf['name'] +  \
                                        '.csv') , 'w'), lineterminator = '\n')
            self.csvLogger.writerow(['timeLog,routine,config,timeInit,timeStart,timeStim,condition,numCond,codeTac,codeVis,soa,timeTac,durTac,timeVis,durVis,timeWait,durWait,keyCode,keyRt,keyPresstime'])
        
        self.keys = self.initConf['keys'].split()
        if len(self.keys) < 2:
            self.initConf['keys'] = self.defaultInitConf['keys']
            self.keys = self.initConf['keys'].split()

        # init graphics
        self.pictures = {}
        self.lists = {}
        # load all the images we're going to display
        for conf in self.runConfs.values():
            for pict in ['visUL', 'visUR', 'visDL', 'visDR']:
                imageName = conf[pict]
                if imageName in self.pictures or len(imageName) == 0 :
                    # We've already loaded that image
                    continue
                pic = self.pictures[imageName] = image.load( getPathFromString(imageName) )
                texture = pic.get_texture()
                # Compile a display list for a quad with texture coordinates
                t = texture.tex_coords
                self.lists[imageName] = glGenLists(1)
                glNewList(self.lists[imageName], GL_COMPILE)
                glShadeModel(GL_FLAT)
                glEnable(GL_BLEND)
                glBlendEquation(GL_FUNC_ADD)
                glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)# transparency based on Source Alpha Value
                glBindTexture(texture.target, texture.id)
                glScalef( float(pic.width), float(pic.height), 1.0)
                glBegin(GL_QUADS)
                glTexCoord2f(t[0], t[1])
                glVertex3f(-0.5, -0.50, 0.0)
                glTexCoord2f(t[3], t[4])
                glVertex3f(0.50, -0.50, 0.0)
                glTexCoord2f(t[6], t[7])
                glVertex3f(0.50, 0.50, 0.0)
                glTexCoord2f(t[9], t[10])
                glVertex3f(-0.50, 0.50, 0.0)
                glEnd()
                glEndList()
        
        # init flags
        self.flagSchedule = True #start with event scheduling
        self.flagPresent  = False
        self.flagKeyread  = False
        self.flagLogging  = False
        
        self.flagReadOn = False
        self.flagReadOff = False
            
        self.posVert = {}
        self.posHorz = {}
        self.scaleMax = {}
        self.scaleMin = {}
        self.currentScale = {}
        self.cond = []
        self.durVib = []
        self.durFlash = []
        self.durWait = []
        self.parameter = []
        
        self.updateTime = 0.02 # 50Hz

        # initiate local variables
        self.condIterator = -1
        self.vOffTime = 0.0
        self.vOnTime = 0.0
        self.fOffTime = 0.0
        self.fOnTime = 0.0
        self.vibDone = True
        self.flashDone = True
        self.lastVib = 0.0
        self.lastFlash = 0.0
        self.nextVib = 0.0
        self.nextFlash = 0.0
        self.vibOn = False
        self.flashOn = False
        self.lock = False
        
        self.onsetV = -1.0
        self.onsetT = -1.0
        self.keypressed = '-1'
        self.rt         = -1.0
        self.pressdur   = -1.0
        self.onsetWait = -1.0
        self.responsetime = -1.0
        self.displayresponsetime = -1.0
        self.keypressduration = -1.0

    def draw(self, window_width, window_height, eye=-1):
        
        DrawableModule.draw(self, window_width, window_height, eye)

        # Turn blending on
        glPushAttrib(GL_ALL_ATTRIB_BITS)
        glEnable(GL_BLEND)
        glEnable(GL_TEXTURE_2D)
        # Blending Function For transparency Based On Source Alpha Value
        glBlendEquation(GL_FUNC_ADD)
        glBlendFunc(GL_SRC_ALPHA, GL_DST_ALPHA)
        
        glMatrixMode(GL_PROJECTION)
        glPushMatrix()
        glLoadIdentity()
        glOrtho(0, 1, 0, 1, 100, -100)
        glMatrixMode(GL_MODELVIEW)
        glEnable(GL_DEPTH_TEST)
        
        for stim in self.vislist:
            glPushMatrix()
            glLoadIdentity()
            # glTranslatef(20.0 / 100.0, 70.0 /100.0, -50.0)
            glTranslatef( self.posHorz[stim] / 100.0, self.posVert[stim] / 100.0, -50.0)
            # a = ( float(window_height) / float(window_width) )
            glScalef( self.currentScale[stim] / float(window_width), self.currentScale[stim] / float(window_height), 1.0)
            glColor4f(1.0, 1.0, 1.0, 1.0)
            glCallList(self.lists[self.activeConf[stim]]) 
            glPopMatrix()

        glMatrixMode(GL_PROJECTION)
        glPopMatrix()
        glMatrixMode(GL_MODELVIEW)
        glPopAttrib()
    
    
    
    
    
    
    def start(self, dt=0, duration=-1, configName=None):
        
        DrawableModule.start(self, dt, duration, configName)
        
        self.logtimes = {}
        self.buttontimes = {}
        self.currentKey = []

        self.startTimes[1] = time()
        
        self.flagSchedule = True #start with event scheduling
        self.flagPresent  = False
        self.flagKeyread  = False
        self.flagLogging  = False
        
        self.vislist = []  # ['visUL', 'visUR', 'visDL', 'visDR']
        if len(self.activeConf['visUL']) > 0:
            self.vislist.append('visUL')
        if len(self.activeConf['visUR']) > 0:
            self.vislist.append('visUR')
        if len(self.activeConf['visDL']) > 0:
            self.vislist.append('visDL')
        if len(self.activeConf['visDR']) > 0:
            self.vislist.append('visDR')
        
        # get parameters for the visual stimuli from active conf
        self.posVert['visUL'] = self.activeConf["posVert"][0]
        self.posVert['visUR'] = self.activeConf["posVert"][1]
        self.posVert['visDL'] = self.activeConf["posVert"][2]
        self.posVert['visDR'] = self.activeConf["posVert"][3]
        
        self.posHorz['visUL'] = self.activeConf["posHorz"][0]
        self.posHorz['visUR'] = self.activeConf["posHorz"][1]
        self.posHorz['visDL'] = self.activeConf["posHorz"][2]
        self.posHorz['visDR'] = self.activeConf["posHorz"][3]
        
        self.scaleMax['visUL'] = self.activeConf["scaleMax"][0]
        self.scaleMax['visUR'] = self.activeConf["scaleMax"][1]
        self.scaleMax['visDL'] = self.activeConf["scaleMax"][2]
        self.scaleMax['visDR'] = self.activeConf["scaleMax"][3]
        
        self.scaleMin['visUL'] = self.activeConf["scaleMin"][0]
        self.scaleMin['visUR'] = self.activeConf["scaleMin"][1]
        self.scaleMin['visDL'] = self.activeConf["scaleMin"][2]
        self.scaleMin['visDR'] = self.activeConf["scaleMin"][3]
        
        # initially set current scale to minimum value
        self.currentScale['visUL'] = self.scaleMin['visUL']
        self.currentScale['visUR'] = self.scaleMin['visUR']
        self.currentScale['visDL'] = self.scaleMin['visDL']
        self.currentScale['visDR'] = self.scaleMin['visDR']
        
        # set timing variables
        self.durVib = self.activeConf["durTac"]
        self.durFlash = self.activeConf["durVis"]
        self.durWait = self.activeConf["durWait"]
        
        self.currentCond = -1
        self.currentTactil = 0
        self.currentVisual = "0000"
        self.currentSOA = 0.0
        self.currentISI = 0.0
        
        self.responsetime = -1.0
        self.displayresponsetime = -1.0
        self.keypressduration = -1.0
        
        self.cond = []
        # compose a condition label vector consisting of all visual x tactile x soa conditons
        for i in range((len(self.activeConf["Tactil"])*len(self.activeConf["Visual"])*len(self.activeConf["SOA"]))):
            self.cond.append(i)
            
        # randomize the order of the condition label vector for the first trials
        random.shuffle(self.cond)
        random.shuffle(self.cond)
        
        # compose a parameter vector where cols = parameter types (tactil, visual, soa) and row = condition 
        self.parameter = [[] for i in range(3)]
        for i in self.activeConf["Tactil"]:        
            for j in self.activeConf["Visual"]:
                for k in self.activeConf["SOA"]:
                    self.parameter[0].append(i)
                    self.parameter[1].append(j)
                    self.parameter[2].append(k)
                    # print 'iterators are %f %f %f' %(i,j,k)

        pyglet.clock.schedule_interval(self.update, self.updateTime)
        
        # self.controller.registerKeyboardAction(self.initConf['keys'], self.onKeyPress, self.onKeyRelease)

        
        
        
    def stop(self, dt=0):
        DrawableModule.stop(self, dt)
        pyglet.clock.unschedule(self.update)
        self.controller.unregisterKeyboardAction( self.initConf['keys'], self.onKeyPress, self.onKeyRelease)
        
        
        
        
    def cleanup(self):
        DrawableModule.cleanup(self)
        
        
        
    
    def onKeyPress(self, keypressed=None):
        print 'PRESS'# # get times
        if self.flagKeyWait:
            self.buttontimes[0] = time() - self.startTimes[2] # stim onset time
            self.flagKeyPress = True
            self.flagKeyWait = False
            self.currentKey = keypressed
        # startTimes = self.getStartingTimes()
        
        # # get key
        # self.currentKeys.append(keypressed)
        # self.log("Key %s pressed"%keypressed)
        
        # # create entry for this key
        # self.buttonpresstime[keypressed] = self.controller.gTimeManager.experimentTime()
        # self.logline[keypressed] = []
        
        # # act on key
        # if self.activeConf['unpause']:
            # responsetime = self.controller.gTimeManager.unpause()
        # else:
            # responsetime = self.buttonpresstime[keypressed] - startTimes[1]
        # # log    
        # if self.csvLogger:            
            # displayresponsetime =  self.buttonpresstime[keypressed] - startTimes[2]
            # self.logline[keypressed] = startTimes + [ self.controller._currentRoutine, self.controller._currentCondition ]\
                                     # + [keypressed, str("%.4f"%responsetime), str("%.4f"%displayresponsetime)]
        
        
        
        
    def onKeyRelease(self, keypressed=None):
        print 'RELEASE'
        if self.flagKeyPress:
            self.buttontimes[1] = time() - self.startTimes[2]
            self.flagKeyPress = False
            self.flagKeyWait = False
        
        # # get only keys which were pressed after start
        # if self.currentKeys.count(keypressed):
            # self.currentKeys.remove(keypressed)
            # self.log("Key %s released"%keypressed)
            
            # # get times
            # keypressduration = self.controller.gTimeManager.experimentTime() - self.buttonpresstime[keypressed]
        
            # # log
            # if self.csvLogger and len(self.logline[keypressed]) > 0:
                # self.logline[keypressed].append( str("%.4f"%keypressduration) )
                # self.csvLogger.writerow(self.logline[keypressed])
                # # keep but empty the log line for this key
                # self.logline[keypressed] = []
                
            # if self.activeConf['endRoutine']:
                # self.controller.endCurrentRoutine()
        # else:
            # self.log("Ignored key %s release"%keypressed)
        
        
        
    def update(self, dt):
######### First, schedule the next stimulus ######################################################################
        if self.flagSchedule:
        
            # print '#1 Scheduling'
# old way might need improvement
            # increment the iterator through the soa list till end of list is reached..
            self.condIterator = self.condIterator + 1
            # then shuffle the list and start reading form the first element on
            if self.condIterator >= len(self.cond):
                random.shuffle(self.cond)
                self.condIterator = 0
            
            # set stimulus parameter for the next presentation based on condition shuffling
            self.currentCond = self.cond[self.condIterator]
            self.currentTactil = self.parameter[0][self.currentCond]
            self.currentVisual = "%4d"%(self.parameter[1][self.currentCond])
            self.currentSOA = self.parameter[2][self.currentCond]
            
            # timing of next stimulus pair
            # if SOA negative, first V then T are presented
            if self.currentSOA < 0.0:
                self.nextV = time() + 0.5 #impose a fixed 500 ms delay from scheduling to first presentation
                self.nextT = self.nextV + abs(self.currentSOA)
            # if SOA positive, first T then V are presented
            else:
                self.nextT = time() + 0.5 #impose a fixed 500 ms delay from scheduling to first presentation
                self.nextV = self.nextT + abs(self.currentSOA)
            
            #set onset flags to negative default value
            self.onsetT = -1.0
            self.onsetV = -1.0
            self.onsetWait = -1.0
            self.responsetime = -1.0
            self.displayresponsetime = -1.0
            self.keypressduration = -1.0
            self.buttonpresstime = {}
            self.logline = {}
            
            # update stimulus flags
            self.flagVready = True
            self.flagVdone = False
            self.flagTready = True
            self.flagTdone = False
            
            # update pause flag
            self.flagWait = True
            self.flagReadOn = False
            self.flagReadOff = False
            
            # self.logtimes = [-1.0, -1.0, -1.0, -1.0, -1.0]
            self.logtimes = {}
            self.logtimes[0] = -1.0
            self.logtimes[1] = -1.0
            self.logtimes[2] = -1.0
            self.logtimes[3] = -1.0
            self.logtimes[4] = -1.0
            self.logtimes[5] = -1.0
            # self.buttontimes = [-1.0, -1.0]
            self.buttontimes = {}
            self.buttontimes[0] = -1.0
            self.buttontimes[1] = -1.0
            
            self.currentKey = []
            self.currentKey = 'NaN'
            
            self.flagKeyWait = True
            self.flagKeyPress = False

            # update procedure flags
            self.flagSchedule = False
            self.flagPresent = True # move on to stim presentation
            self.flagKeyread = False
            self.flagLogging = False
            
######### Second, present the stimulus ############################################################################
        elif self.flagPresent:
            # print '#2 Presenting'
            
            # get current time
            curTime = time()
            
            # start reading from the keyboard
            if not self.flagReadOn:
                self.flagReadOn = True
                self.startTimes[2] = curTime
                self.logtimes[0] = self.startTimes[0]
                self.logtimes[1] = self.startTimes[1]
                self.logtimes[2] = self.startTimes[2]
                #start reading from the keyboard at begin of the stimulation period
                self.controller.registerKeyboardAction( self.initConf['keys'], self.onKeyPress, self.onKeyRelease)
                
            # Tactile Stimulus Presentation?
            if (curTime >= self.nextT) and not (self.flagTdone):
                
                # if vibration duration time is not exceeded
                if curTime <= self.nextT + self.durVib:
                    # send trigger to parallel port and do the vibration
                    self.pp.write(self.currentTactil, self.address)
                    
                    
                    # for the first iteration..
                    if self.flagTready:
                        print 'Tactile: write code %d to LPT'%(self.currentTactil)
                        # get the scheduled onset time (note, it's not display time)
                        self.onsetT = curTime
                        self.logtimes[3] = self.onsetT
                        # update stimulus flag
                        self.flagTready = False
                # if vibration duration time is exceeded update stimulus flag
                else:
                    self.flagTdone = True
            
            # Visual Stimulus Presentation?
            if (curTime >= self.nextV) and not (self.flagVdone):
                
                # if visual duration time is not exceeded
                if curTime <= self.nextV + self.durFlash:
                    
                    # present the visual stimuli as requested
                    if self.currentVisual[0] is '1':
                        self.currentScale['visUL'] = self.scaleMax['visUL']
                    if self.currentVisual[1] is '1':
                        self.currentScale['visUR'] = self.scaleMax['visUR']
                    if self.currentVisual[2] is '1':
                        self.currentScale['visDL'] = self.scaleMax['visDL']
                    if self.currentVisual[3] is '1':
                        self.currentScale['visDR'] = self.scaleMax['visDR']
                    
                    
                    # for the first iteration..
                    if self.flagVready:
                        print 'Visual: present stimuli %s %s %s %s'%(self.currentVisual[0],self.currentVisual[1],self.currentVisual[2],self.currentVisual[3])
                        # get the scheduled onset time (note, it's not display time)
                        self.onsetV = curTime
                        self.logtimes[4] = self.onsetV
                        # update stimulus flag
                        self.flagVready = False
                # if visual duration time is exceeded update stimulus flag
                else:
                    # reset visual to minimal value
                    self.currentScale['visUL'] = self.scaleMin['visUL']
                    self.currentScale['visUR'] = self.scaleMin['visUR']
                    self.currentScale['visDL'] = self.scaleMin['visDL']
                    self.currentScale['visDR'] = self.scaleMin['visDR']
                    # update stimulus flag
                    self.flagVdone = True
            
            # if both stimulations done
            if self.flagVdone and self.flagTdone:
                # update procedure flags
                self.flagSchedule = False
                self.flagPresent = False
                self.flagKeyread = True # move on to keyboard reading
                self.flagLogging = False
                
######### Third, read from the keyboard ##############################################################################
        elif self.flagKeyread:
            # print '#3 Keyboard Reading'
            curTime = time()
            
            # for the first iteration
            if self.flagWait:
                #..get waitonsettime
                self.onsetWait = curTime
                self.logtimes[5] = self.onsetWait
                self.flagWait = False
            
            # if wait duration time is exceeded update procedure flags
            if curTime >= self.onsetWait + self.durWait:
                
                #unregister the keyboard at the end of the waiting period
                self.controller.unregisterKeyboardAction( self.initConf['keys'], self.onKeyPress, self.onKeyRelease)

                # update procedure flags
                self.flagSchedule = False
                self.flagPresent = False
                self.flagKeyread = False
                self.flagLogging = True # move on to logging
                
######### Fourth, write trial info and response to logfile ###############################################################
        elif self.flagLogging:
            # print '#4 Logging'
        
# improve logging by adding exact stim onset timing and button press information
            
            if self.logActive:
                print '#### logging ####'
                # log time
                line = [str("%.4f"%self.controller.gTimeManager.experimentTime()), \
                                    self.controller._currentRoutine, \
                                    self.controller._currentCondition ]
                line.extend([str("%.4f"%self.logtimes[0]),str("%.4f"%self.logtimes[1]), \
                               str("%.4f"%self.logtimes[2]),(self.currentCond+1), len(self.cond), \
                               self.currentTactil, self.currentVisual, self.currentSOA, \
                               str("%.4f"%self.logtimes[3]),self.durVib, \
                               str("%.4f"%self.logtimes[4]),self.durFlash, str("%.4f"%self.logtimes[5]), self.durWait, \
                               self.currentKey, str("%.4f"%self.buttontimes[0]),str("%.4f"%self.buttontimes[1])])
                self.csvLogger.writerow(line)

            # update flags
            self.flagSchedule = True # move on to scheduling
            self.flagPresent = False
            self.flagKeyread = False
            self.flagLogging = False
        # else:
            #raise an error