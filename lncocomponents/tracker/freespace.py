import numpy as np
from platform import system
from os import environ
from os.path import *
from ctypes import *
from ctypes.util import find_library
import math

# struct FreespaceDeviceInfo {
# /** The user-meaningful name for the device. */
# const char* name;

# /** Device vendor ID code */
# uint16_t vendor;

# /** Product ID */
# uint16_t product;

# /** HID message protocol verson */
# int hVer;
# };
class FreespaceDeviceInfo(Structure):
    _fields_ = [ ("name", c_char_p),
                 ("vendor", c_ushort),
                 ("product", c_ushort),
                 ("hVer", c_int) ]
                 

# struct freespace_DataModeRequest {
# /** Enable Body Motion: when set to 1 enables Body Frame Motion reports. */
# uint8_t enableBodyMotion;
# /** Enable User Position: when set to 1 enables User Frame Position reports */
# uint8_t enableUserPosition;
# /** Inhibit Power Manager: when set to 1 disables the power management feature that automatically stops sending motion reports after a period of no motion. */
# uint8_t inhibitPowerManager;
# /** Enable Mouse Movement: when set to 1 enables Mouse Movement reports. */
# uint8_t enableMouseMovement;
# /** Disable Freespace: when set to 1 disables the Freespace motion sensing system to conserve power. No pointer or motion reports are sent regardless of the value of the other bits. */
# uint8_t disableFreespace;
# /** Reserved for testing, */
# uint8_t SDA;
# /** Report current data mode: when set to causes a doata mode repsones message to be generated but does not update data mode. */
# uint8_t status;
# /** Aggregate: when set, if both Body Frame and User frame are enabled, send them as a BodyUser message, which combines the two.  */
# uint8_t aggregate;
# };
class freespace_DataModeRequest(Structure):
    _fields_ = [ ("enableBodyMotion", c_ubyte),
                 ("enableUserPosition", c_ubyte),
                 ("inhibitPowerManager", c_ubyte),
                 ("enableMouseMovement", c_ubyte),
                 ("disableFreespace", c_ubyte),
                 ("SDA", c_ubyte),
                 ("status", c_ubyte),
                 ("aggregate", c_ubyte) ]

# struct freespace_UserFrame {
# /** Button bits. */
# uint8_t button1;
# uint8_t button2;
# uint8_t button3;
# uint8_t button4;
# uint8_t button5;
# uint8_t button6;
# uint8_t button7;
# uint8_t button8;
# /** X pointer movement. */
# int8_t deltaX;
# /** Y pointer movement. */
# int8_t deltaY;
# /** Scroll wheel movement. */
# int8_t deltaWheel;
# /** Correlates the position report with the Body Frame Motion Report */
# uint16_t sequenceNumber;
# /** Linear Offset is in units of meters. X positive is right. Y positive is near. Z positive is down wrt the user frame of reference. */
# int16_t linearPosX;
# int16_t linearPosY;
# int16_t linearPosZ;
# /** Angular Position is in dimensionless units. The axes are given in quaternion form where A, B, C, D represent the real, i, j, and k coefficients. */
# int16_t angularPosA;
# int16_t angularPosB;
# int16_t angularPosC;
# int16_t angularPosD;
# };
class freespace_UserFrame(Structure):
    _fields_ = [ ("button1", c_ubyte),
                 ("button2", c_ubyte),
                 ("button3", c_ubyte),
                 ("button4", c_ubyte),
                 ("button5", c_ubyte),
                 ("button6", c_ubyte),
                 ("button7", c_ubyte),
                 ("button8", c_ubyte),
                 ("deltaX", c_byte),
                 ("deltaY", c_byte),
                 ("deltaWheel", c_byte),
                 ("sequenceNumber", c_ushort),
                 ("linearPosX", c_short),
                 ("linearPosY", c_short),
                 ("linearPosZ", c_short),
                 ("angularPosA", c_short),
                 ("angularPosB", c_short),
                 ("angularPosC", c_short),
                 ("angularPosD", c_short) ]


# struct freespace_BodyFrame {
# /** Button bits. */
# uint8_t button1;
# uint8_t button2;
# uint8_t button3;
# uint8_t button4;
# uint8_t button5;
# uint8_t button6;
# uint8_t button7;
# uint8_t button8;
# /** X pointer movement. */
# int8_t deltaX;
# /** Y pointer movement. */
# int8_t deltaY;
# /** Scroll wheel movement. */
# int8_t deltaWheel;
# /** A monotonically increasing integer generated by the Freespace sensor board at a nominal rate of 125 Hz.
# Can be used to correlate body frame messages with the user frame messages */
# uint16_t sequenceNumber;
# /** Linear Acceleration is reported in SI units (cm/s^2) with an exponent of -1. X is positive forward. Y is positive right. Z is positive down wrt handheld frame of reference. */
# int16_t linearAccelX;
# int16_t linearAccelY;
# int16_t linearAccelZ;
# /** Angular Velocity is reported in units of rad/s with an exponent of -3. X positive is tilt right(roll). Y positive it tilt up(pitch). Z positive is turn right(yaw) wrt the handheld device frame of reference. */
# int16_t angularVelX;
# int16_t angularVelY;
# int16_t angularVelZ;
# };			 
class freespace_BodyFrame(Structure):
    _fields_ = [ ("button1", c_ubyte),
                 ("button2", c_ubyte),
                 ("button3", c_ubyte),
                 ("button4", c_ubyte),
                 ("button5", c_ubyte),
                 ("button6", c_ubyte),
                 ("button7", c_ubyte),
                 ("button8", c_ubyte),
                 ("deltaX", c_byte),
                 ("deltaY", c_byte),
                 ("deltaWheel", c_byte),
                 ("sequenceNumber", c_ushort),
                 ("linearAccelX", c_short),
                 ("linearAccelY", c_short),
                 ("linearAccelZ", c_short),
                 ("angularVelX", c_short),
                 ("angularVelY", c_short),
                 ("angularVelZ", c_short)]

# struct freespace_message {
# int messageType;
# uint8_t ver;  /**< HID protocol version */
# uint8_t len;  /**< Length, used in version 2 only */
# uint8_t dest; /**< Destination, used in version 2 only */
# uint8_t src;  /**< Source, used in version 2 only */
# union {
    # [...]
    # struct freespace_DataModeRequest dataModeRequest;
    # [...]
    # struct freespace_UserFrame userFrame;
    # [..]
    # }
# }

class freespace_message_content(Union):
    _fields_ = [ ("dataModeRequest", freespace_DataModeRequest),
                 ("bodyFrame", freespace_BodyFrame),
                 ("userFrame", freespace_UserFrame) ]
                 
class freespace_message(Structure):
    _anonymous_ = ("u",)
    _fields_ = [ ("messageType", c_int),
                 ("ver", c_ubyte),
                 ("len", c_ubyte),
                 ("dest", c_ubyte),
                 ("src", c_ubyte),
                 ("u", freespace_message_content) ]

libfs = None
try:
    environ['PATH'] += ';' + abspath(join(dirname(abspath(__file__)), '..', 'lib'))
    if system() == "Windows":
        dllfile = find_library('libfreespace.dll')
        if dllfile is None:
            raise RuntimeError("Could not find libfreespace.dll")
    elif system() == "Linux":
        dllfile = find_library('libfreespace.so')
        if dllfile is None:
            raise RuntimeError("Could not find libfreespace.so")
    elif system() == "Darwin":
        print "freespace is not available on mac"
        raise RuntimeError("libfreespace not available on OSX")
    libfs = cdll.LoadLibrary(dllfile) 
except Exception:
    print "Failed to import freespace DLL."

class FreeSpace(object):

    UserPositionMode = False
    id = c_int(-1)
    angularReference = np.zeros(4)
    delta = np.zeros(3)
    
    def __init__(self):
        if libfs is None:
            raise RuntimeError("Freespace dll was not loaded")   
        libfs.freespace_init()
        version = c_char_p(libfs.freespace_version())
        print "Using libfreespace version %s"%version.value
        numsensors = c_int(0)
        libfs.freespace_getDeviceList(pointer(self.id), 1, pointer(numsensors))
        if numsensors.value > 0:
            info = FreespaceDeviceInfo()
            ret = libfs.freespace_getDeviceInfo(self.id, pointer(info))
            if ret == 0:
                self.description = info.name
        else :
            raise RuntimeError("Could not find a freespace device")     
        self.angularReference[0] = 1.0
        
    def __del__(self):
        if libfs is not None:
            libfs.freespace_exit()
    
    def open(self, UserPositionMode = True):
        self.UserPositionMode = UserPositionMode
        self.delta = np.zeros(3)
        ret = libfs.freespace_openDevice(self.id)
        if ret == 0:
            ret = libfs.freespace_flush(self.id)
            if ret == 0:
                msg = freespace_message()
                msg.messageType = 22  #FREESPACE_MESSAGE_DATAMODEREQUEST 
                if self.UserPositionMode:
                    msg.dataModeRequest.enableUserPosition = 1
                    self.angularPos = np.zeros(4)
                else:
                    msg.dataModeRequest.enableBodyMotion = 1
                    self.angularPos = np.zeros(3)
                msg.dataModeRequest.inhibitPowerManager = 1
                msg.dataModeRequest.enableMouseMovement = 0
                ret = libfs.freespace_sendMessage(self.id, pointer(msg) )
                if ret != 0:
                    raise RuntimeError("Could not configure device %s"%self.description)
            else:
                raise RuntimeError("Could not flush device %s"%self.description)
        else:
            raise RuntimeError("Could not open device %s"%self.description)
        
    def close(self):
        msg = freespace_message()
        # msg.messageType = 22 #FREESPACE_MESSAGE_DATAMODEREQUEST 
        # msg.dataModeRequest.enableMouseMovement = 1
        # libfs.freespace_sendMessage(self.id, pointer(msg) )
        libfs.freespace_closeDevice(self.id)
    
    def retrieve(self):
        msg = freespace_message()
        ret = libfs.freespace_readMessage( self.id, pointer(msg), 100)
        if ret == 0:
            if msg.messageType == 39: # FREESPACE_MESSAGE_USERFRAME
                self.angularPos[0] = msg.userFrame.angularPosA # w
                self.angularPos[1] = msg.userFrame.angularPosB # x
                self.angularPos[2] = msg.userFrame.angularPosC # y
                self.angularPos[3] = msg.userFrame.angularPosD # z
                self.delta[0] = self.delta[0] + msg.userFrame.deltaX
                self.delta[1] = self.delta[1] + msg.userFrame.deltaY
                self.delta[2] = self.delta[2] + msg.userFrame.deltaWheel
            elif msg.messageType == 38: # FREESPACE_MESSAGE_BODYFRAME
                self.delta[0] = msg.bodyFrame.angularVelX * 18.0 / ( 10000.0 * math.pi )
                self.delta[1] = msg.bodyFrame.angularVelY * 18.0 / ( 10000.0 * math.pi )
                self.delta[2] = msg.bodyFrame.angularVelZ * 18.0 / ( 10000.0 * math.pi )
                self.angularPos += self.delta
    
    def calibrate(self):
        msg = freespace_message()
        ret = libfs.freespace_readMessage( self.id, pointer(msg), 1000)
        if ret == 0:
            if msg.messageType == 39: # FREESPACE_MESSAGE_USERFRAME
                self.angularReference[0] = msg.userFrame.angularPosA # w
                self.angularReference[1] = msg.userFrame.angularPosB # x
                self.angularReference[2] = msg.userFrame.angularPosC # y
                self.angularReference[3] = msg.userFrame.angularPosD # z
                self.angularReference = self.angularReference / np.sqrt(np.dot(self.angularReference, self.angularReference))
            elif msg.messageType == 38: # FREESPACE_MESSAGE_BODYFRAME
                self.angularPos = np.zeros(3)
            print "Freespace calibrated ", self.angularReference
    
    def getQuaternion(self):
        # get normalized sensor quaternion
        q1 =  self.angularPos / np.sqrt(np.dot(self.angularPos, self.angularPos)) 
        # compute conjugate quaternion
        q1 = - q1
        q1[0] = -q1[0]
        # multiply with reference from calibration
        quat = np.zeros(4)
        quat[0] = -q1[1] * self.angularReference[1] - q1[2] * self.angularReference[2] - q1[3] * self.angularReference[3] + q1[0] * self.angularReference[0];
        quat[1] =  q1[1] * self.angularReference[0] + q1[2] * self.angularReference[3] - q1[3] * self.angularReference[2] + q1[0] * self.angularReference[1];
        quat[2] = -q1[1] * self.angularReference[3] + q1[2] * self.angularReference[0] + q1[3] * self.angularReference[1] + q1[0] * self.angularReference[2];
        quat[3] =  q1[1] * self.angularReference[2] - q1[2] * self.angularReference[1] + q1[3] * self.angularReference[0] + q1[0] * self.angularReference[3];

        return quat

    def getMatrix(self):
        q = self.getQuaternion()
        
        # compute matrix from quaternion
        mat = np.eye(3)
        mat[0,0] = (2.0 * q[0] * q[0]) + (2.0 * q[1] * q[1]) - 1.0
        mat[0,1] = (2.0 * q[1] * q[2]) + (2.0 * q[0] * q[3])
        mat[0,2] = (2.0 * q[1] * q[3]) - (2.0 * q[0] * q[2])
        mat[1,2] = (2.0 * q[2] * q[3]) + (2.0 * q[0] * q[1])
        mat[2,2] = (2.0 * q[0] * q[0]) + (2.0 * q[3] * q[3]) - 1.0
        
        return mat
        
    def getEuler(self):
        if self.UserPositionMode:
            m = self.getMatrix()
            # compute euler angles from matrix
            angles = np.zeros(3)
            angles[0] = math.atan2(m[1,2], m[2,2]) / math.pi * 180.0 
            angles[1] = math.asin(-m[0,2]) / math.pi * 180.0 
            angles[2] = math.atan2(m[0,1], m[0,0]) / math.pi * 180.0 
            return angles 
        else:
            return self.angularPos
            
    
    